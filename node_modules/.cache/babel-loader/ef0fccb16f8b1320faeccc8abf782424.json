{"ast":null,"code":"import _objectSpread from\"/Users/dilrubareyyan/Documents/Files/School/SEBA/laundrywise/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/dilrubareyyan/Documents/Files/School/SEBA/laundrywise/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useEffect}from\"react\";import{makeStyles}from\"@material-ui/core/styles\";import{TextField}from\"@material-ui/core\";import DateFnsUtils from\"@date-io/date-fns\";import{MuiPickersUtilsProvider,KeyboardDatePicker}from\"@material-ui/pickers\";import TodayIcon from\"@material-ui/icons/Today\";/**\n * component for changing movie attributes at the same place where they are displayed\n * @param {props} props\n */function CustomTextField(props){// by moving the styles inside the functional component the props can influence the style\nvar useStyles=makeStyles(function(theme){return{customtextfieldroot:{minHeight:theme.mixins.textfieldminheight,width:props.nofullwidth?\"\":\"100%\",display:\"flex\",alignItems:\"center\"},inputBase:{padding:theme.spacing(1),color:\"inherit !important\"},input:{padding:theme.spacing(0),textAlign:props.align?props.align:\"left\",fontSize:props.variant?theme.typography[props.variant].fontSize:theme.typography.fontSize,color:\"inherit\"}};});var classes=useStyles();var _React$useState=React.useState(props.value),_React$useState2=_slicedToArray(_React$useState,2),value=_React$useState2[0],setValue=_React$useState2[1];useEffect(function(){setValue(props.value);},[props.value]);return/*#__PURE__*/_jsx(\"div\",{className:classes.customtextfieldroot,children:(props.value===\"\"||!props.value||props.value===null)&&!props.editMode?/*#__PURE__*/ // if no value is given return the given text\n_jsx(TextField,_objectSpread({value:props.isEmptyText,disabled:true,variant:\"standard\",InputProps:{className:classes.inputBase,disableUnderline:true},inputProps:{className:classes.input}},props.furtherProps)):props.type!==\"date\"?/*#__PURE__*/ // return a standard textfield\n_jsx(TextField,_objectSpread({value:props.editMode?value:props.value+(props.suffix?\" \"+props.suffix:\"\"),onChange:function onChange(e){return setValue(e.target.value);},onBlur:function onBlur(e){return props.onChange?props.onChange(e.target.value):null;},disabled:!props.editMode,variant:props.editMode?\"outlined\":\"standard\",InputProps:props.editMode?{className:classes.inputBase}:{className:classes.inputBase,disableUnderline:true},inputProps:{className:classes.input}},props.furtherProps)):/*#__PURE__*/ // if the field has a value and the type is date return a datepicker\n_jsx(MuiPickersUtilsProvider,{utils:DateFnsUtils,children:/*#__PURE__*/_jsx(KeyboardDatePicker,_objectSpread(_objectSpread({format:\"dd.MM.yyyy\",value:props.value,readOnly:!props.editMode,keyboardIcon:props.editMode?/*#__PURE__*/_jsx(TodayIcon,{}):null,variant:props.editMode?\"outlined\":\"standard\",InputProps:{className:classes.inputBase,disableUnderline:true},inputProps:{className:classes.input}},props.furtherProps),{},{onChange:function onChange(date){return props.onChange?props.onChange(date):null;},invalidDateMessage:\"\",KeyboardButtonProps:{\"aria-label\":\"change date\"}}))})});}// attributes of props and their type\nexport default CustomTextField;","map":{"version":3,"sources":["/Users/dilrubareyyan/Documents/Files/School/SEBA/laundrywise/frontend/src/components/CustomTextField.js"],"names":["React","useEffect","makeStyles","TextField","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDatePicker","TodayIcon","CustomTextField","props","useStyles","theme","customtextfieldroot","minHeight","mixins","textfieldminheight","width","nofullwidth","display","alignItems","inputBase","padding","spacing","color","input","textAlign","align","fontSize","variant","typography","classes","useState","value","setValue","editMode","isEmptyText","className","disableUnderline","furtherProps","type","suffix","e","target","onChange","date"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TextField } from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport TodayIcon from \"@material-ui/icons/Today\";\n\n/**\n * component for changing movie attributes at the same place where they are displayed\n * @param {props} props\n */\nfunction CustomTextField(props) {\n    // by moving the styles inside the functional component the props can influence the style\n    const useStyles = makeStyles((theme) => ({\n        customtextfieldroot: {\n            minHeight: theme.mixins.textfieldminheight,\n            width: props.nofullwidth ? \"\" : \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n        },\n        inputBase: {\n            padding: theme.spacing(1),\n            color: \"inherit !important\",\n        },\n        input: {\n            padding: theme.spacing(0),\n            textAlign: props.align ? props.align : \"left\",\n            fontSize: props.variant\n                ? theme.typography[props.variant].fontSize\n                : theme.typography.fontSize,\n            color: \"inherit\",\n        },\n    }));\n\n    const classes = useStyles();\n\n    const [value, setValue] = React.useState(props.value);\n\n    useEffect(() => {\n        setValue(props.value);\n    }, [props.value]);\n\n    return (\n        <div className={classes.customtextfieldroot}>\n            {(props.value === \"\" || !props.value || props.value === null) &&\n            !props.editMode ? (\n                // if no value is given return the given text\n                <TextField\n                    value={props.isEmptyText}\n                    disabled={true}\n                    variant=\"standard\"\n                    InputProps={{\n                        className: classes.inputBase,\n                        disableUnderline: true,\n                    }}\n                    inputProps={{\n                        className: classes.input,\n                    }}\n                    {...props.furtherProps}\n                />\n            ) : props.type !== \"date\" ? (\n                // return a standard textfield\n                <TextField\n                    value={\n                        props.editMode\n                            ? value\n                            : props.value +\n                              (props.suffix ? \" \" + props.suffix : \"\")\n                    }\n                    onChange={(e) => setValue(e.target.value)}\n                    onBlur={(e) =>\n                        props.onChange ? props.onChange(e.target.value) : null\n                    }\n                    disabled={!props.editMode}\n                    variant={props.editMode ? \"outlined\" : \"standard\"}\n                    InputProps={\n                        props.editMode\n                            ? {\n                                  className: classes.inputBase,\n                              }\n                            : {\n                                  className: classes.inputBase,\n                                  disableUnderline: true,\n                              }\n                    }\n                    inputProps={{\n                        className: classes.input,\n                    }}\n                    {...props.furtherProps}\n                />\n            ) : (\n                // if the field has a value and the type is date return a datepicker\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        format=\"dd.MM.yyyy\"\n                        value={props.value}\n                        readOnly={!props.editMode}\n                        keyboardIcon={props.editMode ? <TodayIcon /> : null}\n                        variant={props.editMode ? \"outlined\" : \"standard\"}\n                        InputProps={{\n                            className: classes.inputBase,\n                            disableUnderline: true,\n                        }}\n                        inputProps={{\n                            className: classes.input,\n                        }}\n                        {...props.furtherProps}\n                        onChange={(date) =>\n                            props.onChange ? props.onChange(date) : null\n                        }\n                        invalidDateMessage=\"\"\n                        KeyboardButtonProps={{\n                            \"aria-label\": \"change date\",\n                        }}\n                    />\n                </MuiPickersUtilsProvider>\n            )}\n        </div>\n    );\n}\n\n// attributes of props and their type\nCustomTextField.propTypes = {\n    align: PropTypes.string,\n    variant: PropTypes.string,\n    editMode: PropTypes.bool,\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    furtherProps: PropTypes.any,\n};\n\nexport default CustomTextField;\n"]},"metadata":{},"sourceType":"module"}