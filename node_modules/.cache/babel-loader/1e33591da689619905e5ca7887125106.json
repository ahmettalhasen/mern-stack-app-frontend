{"ast":null,"code":"import _slicedToArray from\"/Users/dilrubareyyan/Documents/Files/School/SEBA/laundrywise/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useEffect}from\"react\";import{connect,useSelector}from\"react-redux\";import{getMovie,changeMovie,addMovie}from\"../redux/actions\";import MovieDetailsComponent from\"../components/MovieDetailsComponent\";import Loading from\"../components/Loading\";/**\n * Manages the process of getting movie details data\n * @param {props} props\n */function MovieDetailsView(props){// props can be deconstructed into single variables, so you do not need to write \"props.\" all the time\nvar match=props.match,getMovie=props.getMovie;// from redux store\nvar selectedMovie=useSelector(function(state){return state.selectedMovie;});var user=useSelector(function(state){return state.user;});// state variable of this functional component\nvar _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),newMovie=_React$useState2[0],setNewMovie=_React$useState2[1];useEffect(function(){// get id of movie from URL\nvar movieId=match.params.id;// check if a new movie is created\nif(movieId===\"new\"){// procedd with an empty element\nsetNewMovie(true);}else{// trigger movie load from backend\ngetMovie(movieId);}},[match.params]);// for saving an existing movie\nvar onSave=function onSave(movie){props.changeMovie(movie);};// for creating a new movie\nvar onCreate=function onCreate(movie){// trigger redux action add movie\nprops.addMovie(movie);// navigate back to the movie list\nprops.history.push(\"/\");};return!selectedMovie.movie&&!selectedMovie.error&&!newMovie?/*#__PURE__*/_jsx(Loading,{}):selectedMovie.error?/*#__PURE__*/_jsx(\"div\",{children:\"error\"}):selectedMovie.movie?/*#__PURE__*/_jsx(MovieDetailsComponent,{movie:selectedMovie.movie,onSave:onSave,isLoggedIn:!!user.user,isAdmin:!!user.user?user.user.role===\"admin\":false}):newMovie?/*#__PURE__*/_jsx(MovieDetailsComponent,{new:true,onCreate:onCreate,isLoggedIn:!!user.user,isAdmin:!!user.user?user.user.role===\"admin\":false}):null;}// connect() establishes allows the usage of redux functionality\n// here the function getMovie, changeMovie and addMovie are mentionend\n// this is an alternative way of calling connecting them with redux\n// another way is shown in MovieListView.js\nexport default connect(null,{getMovie:getMovie,changeMovie:changeMovie,addMovie:addMovie})(MovieDetailsView);","map":{"version":3,"sources":["/Users/dilrubareyyan/Documents/Files/School/SEBA/laundrywise/frontend/src/views/MovieDetailsView.js"],"names":["React","useEffect","connect","useSelector","getMovie","changeMovie","addMovie","MovieDetailsComponent","Loading","MovieDetailsView","props","match","selectedMovie","state","user","useState","newMovie","setNewMovie","movieId","params","id","onSave","movie","onCreate","history","push","error","role"],"mappings":"uOAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,OAAT,CAAkBC,WAAlB,KAAqC,aAArC,CAEA,OAASC,QAAT,CAAmBC,WAAnB,CAAgCC,QAAhC,KAAgD,kBAAhD,CACA,MAAOC,CAAAA,qBAAP,KAAkC,qCAAlC,CACA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,CAEA;AACA;AACA;AACA,GACA,QAASC,CAAAA,gBAAT,CAA0BC,KAA1B,CAAiC,CAC7B;AAD6B,GAEvBC,CAAAA,KAFuB,CAEHD,KAFG,CAEvBC,KAFuB,CAEhBP,QAFgB,CAEHM,KAFG,CAEhBN,QAFgB,CAI7B;AACA,GAAMQ,CAAAA,aAAa,CAAGT,WAAW,CAAC,SAACU,KAAD,QAAWA,CAAAA,KAAK,CAACD,aAAjB,EAAD,CAAjC,CACA,GAAME,CAAAA,IAAI,CAAGX,WAAW,CAAC,SAACU,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAjB,EAAD,CAAxB,CAEA;AAR6B,oBASGd,KAAK,CAACe,QAAN,CAAe,KAAf,CATH,oDAStBC,QATsB,qBASZC,WATY,qBAW7BhB,SAAS,CAAC,UAAM,CACZ;AACA,GAAIiB,CAAAA,OAAO,CAAGP,KAAK,CAACQ,MAAN,CAAaC,EAA3B,CAEA;AACA,GAAIF,OAAO,GAAK,KAAhB,CAAuB,CACnB;AACAD,WAAW,CAAC,IAAD,CAAX,CACH,CAHD,IAGO,CACH;AACAb,QAAQ,CAACc,OAAD,CAAR,CACH,CACJ,CAZQ,CAYN,CAACP,KAAK,CAACQ,MAAP,CAZM,CAAT,CAcA;AACA,GAAME,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,CAAW,CACtBZ,KAAK,CAACL,WAAN,CAAkBiB,KAAlB,EACH,CAFD,CAIA;AACA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACD,KAAD,CAAW,CACxB;AACAZ,KAAK,CAACJ,QAAN,CAAegB,KAAf,EACA;AACAZ,KAAK,CAACc,OAAN,CAAcC,IAAd,CAAmB,GAAnB,EACH,CALD,CAOA,MAAO,CAACb,aAAa,CAACU,KAAf,EAAwB,CAACV,aAAa,CAACc,KAAvC,EAAgD,CAACV,QAAjD,cACH,KAAC,OAAD,IADG,CAEHJ,aAAa,CAACc,KAAd,cACA,8BADA,CAEAd,aAAa,CAACU,KAAd,cACA,KAAC,qBAAD,EACI,KAAK,CAAEV,aAAa,CAACU,KADzB,CAEI,MAAM,CAAED,MAFZ,CAGI,UAAU,CAAE,CAAC,CAACP,IAAI,CAACA,IAHvB,CAII,OAAO,CAAE,CAAC,CAACA,IAAI,CAACA,IAAP,CAAcA,IAAI,CAACA,IAAL,CAAUa,IAAV,GAAmB,OAAjC,CAA2C,KAJxD,EADA,CAOAX,QAAQ,cACR,KAAC,qBAAD,EACI,GAAG,CAAE,IADT,CAEI,QAAQ,CAAEO,QAFd,CAGI,UAAU,CAAE,CAAC,CAACT,IAAI,CAACA,IAHvB,CAII,OAAO,CAAE,CAAC,CAACA,IAAI,CAACA,IAAP,CAAcA,IAAI,CAACA,IAAL,CAAUa,IAAV,GAAmB,OAAjC,CAA2C,KAJxD,EADQ,CAOR,IAlBJ,CAmBH,CAED;AACA;AACA;AACA;AACA,cAAezB,CAAAA,OAAO,CAAC,IAAD,CAAO,CAAEE,QAAQ,CAARA,QAAF,CAAYC,WAAW,CAAXA,WAAZ,CAAyBC,QAAQ,CAARA,QAAzB,CAAP,CAAP,CACXG,gBADW,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\n\nimport { getMovie, changeMovie, addMovie } from \"../redux/actions\";\nimport MovieDetailsComponent from \"../components/MovieDetailsComponent\";\nimport Loading from \"../components/Loading\";\n\n/**\n * Manages the process of getting movie details data\n * @param {props} props\n */\nfunction MovieDetailsView(props) {\n    // props can be deconstructed into single variables, so you do not need to write \"props.\" all the time\n    let { match, getMovie } = props;\n\n    // from redux store\n    const selectedMovie = useSelector((state) => state.selectedMovie);\n    const user = useSelector((state) => state.user);\n\n    // state variable of this functional component\n    const [newMovie, setNewMovie] = React.useState(false);\n\n    useEffect(() => {\n        // get id of movie from URL\n        let movieId = match.params.id;\n\n        // check if a new movie is created\n        if (movieId === \"new\") {\n            // procedd with an empty element\n            setNewMovie(true);\n        } else {\n            // trigger movie load from backend\n            getMovie(movieId);\n        }\n    }, [match.params]);\n\n    // for saving an existing movie\n    const onSave = (movie) => {\n        props.changeMovie(movie);\n    };\n\n    // for creating a new movie\n    const onCreate = (movie) => {\n        // trigger redux action add movie\n        props.addMovie(movie);\n        // navigate back to the movie list\n        props.history.push(\"/\");\n    };\n\n    return !selectedMovie.movie && !selectedMovie.error && !newMovie ? (\n        <Loading />\n    ) : selectedMovie.error ? (\n        <div>error</div>\n    ) : selectedMovie.movie ? (\n        <MovieDetailsComponent\n            movie={selectedMovie.movie}\n            onSave={onSave}\n            isLoggedIn={!!user.user}\n            isAdmin={!!user.user ? user.user.role === \"admin\" : false}\n        />\n    ) : newMovie ? (\n        <MovieDetailsComponent\n            new={true}\n            onCreate={onCreate}\n            isLoggedIn={!!user.user}\n            isAdmin={!!user.user ? user.user.role === \"admin\" : false}\n        />\n    ) : null;\n}\n\n// connect() establishes allows the usage of redux functionality\n// here the function getMovie, changeMovie and addMovie are mentionend\n// this is an alternative way of calling connecting them with redux\n// another way is shown in MovieListView.js\nexport default connect(null, { getMovie, changeMovie, addMovie })(\n    MovieDetailsView\n);\n"]},"metadata":{},"sourceType":"module"}