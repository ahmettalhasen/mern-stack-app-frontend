{"ast":null,"code":"import _slicedToArray from\"/Users/dilrubareyyan/Documents/Files/School/SEBA/laundrywise/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from\"react\";import{IconButton,Table,TableBody,TableCell,TableContainer,TableRow}from\"@material-ui/core\";import CustomTextField from\"../components/CustomTextField\";import{Add,Delete,Edit}from\"@material-ui/icons\";/**\n * For presenting and changing movie cast information\n * @param {props} props\n */function MovieCast(props){var _React$useState=React.useState(\"\"),_React$useState2=_slicedToArray(_React$useState,2),newActorName=_React$useState2[0],setNewActorName=_React$useState2[1];var _React$useState3=React.useState(\"\"),_React$useState4=_slicedToArray(_React$useState3,2),newActorCharacter=_React$useState4[0],setNewActorCharacter=_React$useState4[1];// on click on add cast member\nvar onAddCastMember=function onAddCastMember(){if(newActorName===\"\"){return;}var newActor={name:newActorName};if(newActorCharacter!==\"\"){newActor.characters=[newActorCharacter];}props.onAddCastMember(newActor);setNewActorName(\"\");setNewActorCharacter(\"\");};return/*#__PURE__*/_jsx(TableContainer,{children:/*#__PURE__*/_jsx(Table,{children:/*#__PURE__*/_jsxs(TableBody,{children:[props.movieCast&&props.movieCast!==0?props.movieCast.map(function(actor,index){return/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(CustomTextField,{value:actor.name,isEmptyText:\"Actor\"})}),actor.characters&&Array.isArray(actor.characters)?/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(TableCell,{children:\"as\"}),/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(CustomTextField,{value:actor.characters[0],isEmptyText:\"a Role\"})})]}):/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(TableCell,{}),/*#__PURE__*/_jsx(TableCell,{})]}),props.isAdmin?/*#__PURE__*/_jsx(TableCell,{children:props.editMode?/*#__PURE__*/_jsx(IconButton,{size:\"small\",onClick:function onClick(){return props.onRemoveCastMember(index);},children:/*#__PURE__*/_jsx(Delete,{})}):/*#__PURE__*/_jsx(IconButton,{size:\"small\",onClick:props.toggleEditMode,disabled:!props.isLoggedIn,children:/*#__PURE__*/_jsx(Edit,{})})}):null]},index);}):null,props.editMode?/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(CustomTextField,{value:newActorName,editMode:props.editMode,onChange:function onChange(value){return setNewActorName(value);}})}),/*#__PURE__*/_jsx(TableCell,{children:\"as\"}),/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(CustomTextField,{value:newActorCharacter,editMode:props.editMode,onChange:function onChange(value){return setNewActorCharacter(value);}})}),/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(IconButton,{size:\"small\",onClick:onAddCastMember,children:/*#__PURE__*/_jsx(Add,{})})})]}):null]})})});}// attributes of props and their type\nexport default MovieCast;","map":{"version":3,"sources":["/Users/dilrubareyyan/Documents/Files/School/SEBA/laundrywise/frontend/src/components/MovieCast.js"],"names":["React","IconButton","Table","TableBody","TableCell","TableContainer","TableRow","CustomTextField","Add","Delete","Edit","MovieCast","props","useState","newActorName","setNewActorName","newActorCharacter","setNewActorCharacter","onAddCastMember","newActor","name","characters","movieCast","map","actor","index","Array","isArray","isAdmin","editMode","onRemoveCastMember","toggleEditMode","isLoggedIn","value"],"mappings":"oRAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACIC,UADJ,CAEIC,KAFJ,CAGIC,SAHJ,CAIIC,SAJJ,CAKIC,cALJ,CAMIC,QANJ,KAOO,mBAPP,CASA,MAAOC,CAAAA,eAAP,KAA4B,+BAA5B,CACA,OAASC,GAAT,CAAcC,MAAd,CAAsBC,IAAtB,KAAkC,oBAAlC,CAEA;AACA;AACA;AACA,GACA,QAASC,CAAAA,SAAT,CAAmBC,KAAnB,CAA0B,qBACkBZ,KAAK,CAACa,QAAN,CAAe,EAAf,CADlB,oDACfC,YADe,qBACDC,eADC,0CAE4Bf,KAAK,CAACa,QAAN,CAAe,EAAf,CAF5B,qDAEfG,iBAFe,qBAEIC,oBAFJ,qBAItB;AACA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC1B,GAAIJ,YAAY,GAAK,EAArB,CAAyB,CACrB,OACH,CACD,GAAIK,CAAAA,QAAQ,CAAG,CAAEC,IAAI,CAAEN,YAAR,CAAf,CACA,GAAIE,iBAAiB,GAAK,EAA1B,CAA8B,CAC1BG,QAAQ,CAACE,UAAT,CAAsB,CAACL,iBAAD,CAAtB,CACH,CACDJ,KAAK,CAACM,eAAN,CAAsBC,QAAtB,EACAJ,eAAe,CAAC,EAAD,CAAf,CACAE,oBAAoB,CAAC,EAAD,CAApB,CACH,CAXD,CAaA,mBACI,KAAC,cAAD,wBACI,KAAC,KAAD,wBACI,MAAC,SAAD,YAEKL,KAAK,CAACU,SAAN,EAAmBV,KAAK,CAACU,SAAN,GAAoB,CAAvC,CACKV,KAAK,CAACU,SAAN,CAAgBC,GAAhB,CAAoB,SAACC,KAAD,CAAQC,KAAR,qBAChB,MAAC,QAAD,yBACI,KAAC,SAAD,wBACI,KAAC,eAAD,EACI,KAAK,CAAED,KAAK,CAACJ,IADjB,CAEI,WAAW,CAAC,OAFhB,EADJ,EADJ,CAOKI,KAAK,CAACH,UAAN,EACDK,KAAK,CAACC,OAAN,CAAcH,KAAK,CAACH,UAApB,CADC,cAEG,MAAC,KAAD,CAAO,QAAP,yBACI,KAAC,SAAD,iBADJ,cAEI,KAAC,SAAD,wBACI,KAAC,eAAD,EACI,KAAK,CAAEG,KAAK,CAACH,UAAN,CAAiB,CAAjB,CADX,CAEI,WAAW,CAAC,QAFhB,EADJ,EAFJ,GAFH,cAYG,MAAC,KAAD,CAAO,QAAP,yBACI,KAAC,SAAD,IADJ,cAEI,KAAC,SAAD,IAFJ,GAnBR,CAwBKT,KAAK,CAACgB,OAAN,cACG,KAAC,SAAD,WACKhB,KAAK,CAACiB,QAAN,cACG,KAAC,UAAD,EACI,IAAI,CAAC,OADT,CAEI,OAAO,CAAE,yBACLjB,CAAAA,KAAK,CAACkB,kBAAN,CACIL,KADJ,CADK,EAFb,uBAQI,KAAC,MAAD,IARJ,EADH,cAYG,KAAC,UAAD,EACI,IAAI,CAAC,OADT,CAEI,OAAO,CAAEb,KAAK,CAACmB,cAFnB,CAGI,QAAQ,CAAE,CAACnB,KAAK,CAACoB,UAHrB,uBAKI,KAAC,IAAD,IALJ,EAbR,EADH,CAuBG,IA/CR,GAAeP,KAAf,CADgB,EAApB,CADL,CAoDK,IAtDV,CAwDKb,KAAK,CAACiB,QAAN,cACG,MAAC,QAAD,yBACI,KAAC,SAAD,wBACI,KAAC,eAAD,EACI,KAAK,CAAEf,YADX,CAEI,QAAQ,CAAEF,KAAK,CAACiB,QAFpB,CAGI,QAAQ,CAAE,kBAACI,KAAD,QAAWlB,CAAAA,eAAe,CAACkB,KAAD,CAA1B,EAHd,EADJ,EADJ,cAQI,KAAC,SAAD,iBARJ,cASI,KAAC,SAAD,wBACI,KAAC,eAAD,EACI,KAAK,CAAEjB,iBADX,CAEI,QAAQ,CAAEJ,KAAK,CAACiB,QAFpB,CAGI,QAAQ,CAAE,kBAACI,KAAD,QACNhB,CAAAA,oBAAoB,CAACgB,KAAD,CADd,EAHd,EADJ,EATJ,cAkBI,KAAC,SAAD,wBACI,KAAC,UAAD,EACI,IAAI,CAAC,OADT,CAEI,OAAO,CAAEf,eAFb,uBAII,KAAC,GAAD,IAJJ,EADJ,EAlBJ,GADH,CA4BG,IApFR,GADJ,EADJ,EADJ,CA4FH,CAED;AAUA,cAAeP,CAAAA,SAAf","sourcesContent":["import React from \"react\";\nimport {\n    IconButton,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableRow,\n} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport CustomTextField from \"../components/CustomTextField\";\nimport { Add, Delete, Edit } from \"@material-ui/icons\";\n\n/**\n * For presenting and changing movie cast information\n * @param {props} props\n */\nfunction MovieCast(props) {\n    const [newActorName, setNewActorName] = React.useState(\"\");\n    const [newActorCharacter, setNewActorCharacter] = React.useState(\"\");\n\n    // on click on add cast member\n    const onAddCastMember = () => {\n        if (newActorName === \"\") {\n            return;\n        }\n        let newActor = { name: newActorName };\n        if (newActorCharacter !== \"\") {\n            newActor.characters = [newActorCharacter];\n        }\n        props.onAddCastMember(newActor);\n        setNewActorName(\"\");\n        setNewActorCharacter(\"\");\n    };\n\n    return (\n        <TableContainer>\n            <Table>\n                <TableBody>\n                    {/* showing the already added cast members  */}\n                    {props.movieCast && props.movieCast !== 0\n                        ? props.movieCast.map((actor, index) => (\n                              <TableRow key={index}>\n                                  <TableCell>\n                                      <CustomTextField\n                                          value={actor.name}\n                                          isEmptyText=\"Actor\"\n                                      />\n                                  </TableCell>\n                                  {actor.characters &&\n                                  Array.isArray(actor.characters) ? (\n                                      <React.Fragment>\n                                          <TableCell>as</TableCell>\n                                          <TableCell>\n                                              <CustomTextField\n                                                  value={actor.characters[0]}\n                                                  isEmptyText=\"a Role\"\n                                              />\n                                          </TableCell>\n                                      </React.Fragment>\n                                  ) : (\n                                      <React.Fragment>\n                                          <TableCell></TableCell>\n                                          <TableCell></TableCell>\n                                      </React.Fragment>\n                                  )}\n                                  {props.isAdmin ? (\n                                      <TableCell>\n                                          {props.editMode ? (\n                                              <IconButton\n                                                  size=\"small\"\n                                                  onClick={() =>\n                                                      props.onRemoveCastMember(\n                                                          index\n                                                      )\n                                                  }\n                                              >\n                                                  <Delete />\n                                              </IconButton>\n                                          ) : (\n                                              <IconButton\n                                                  size=\"small\"\n                                                  onClick={props.toggleEditMode}\n                                                  disabled={!props.isLoggedIn}\n                                              >\n                                                  <Edit />\n                                              </IconButton>\n                                          )}\n                                      </TableCell>\n                                  ) : null}\n                              </TableRow>\n                          ))\n                        : null}\n                    {/* give the opportunity to add a new cast member */}\n                    {props.editMode ? (\n                        <TableRow>\n                            <TableCell>\n                                <CustomTextField\n                                    value={newActorName}\n                                    editMode={props.editMode}\n                                    onChange={(value) => setNewActorName(value)}\n                                />\n                            </TableCell>\n                            <TableCell>as</TableCell>\n                            <TableCell>\n                                <CustomTextField\n                                    value={newActorCharacter}\n                                    editMode={props.editMode}\n                                    onChange={(value) =>\n                                        setNewActorCharacter(value)\n                                    }\n                                />\n                            </TableCell>\n                            <TableCell>\n                                <IconButton\n                                    size=\"small\"\n                                    onClick={onAddCastMember}\n                                >\n                                    <Add />\n                                </IconButton>\n                            </TableCell>\n                        </TableRow>\n                    ) : null}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\n// attributes of props and their type\nMovieCast.propTypes = {\n    movieCast: PropTypes.array,\n    editMode: PropTypes.bool,\n    onAddCastMember: PropTypes.func.isRequired,\n    onRemoveCastMember: PropTypes.func.isRequired,\n    isLoggedIn: PropTypes.bool,\n    toggleEditMode: PropTypes.func.isRequired,\n};\n\nexport default MovieCast;\n"]},"metadata":{},"sourceType":"module"}